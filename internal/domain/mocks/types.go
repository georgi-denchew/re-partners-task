// Code generated by MockGen. DO NOT EDIT.
// Source: repartnerstask.com/m/internal/domain (interfaces: Repository)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/types.go -typed -package mocks . Repository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	types "repartnerstask.com/m/internal/domain/types"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// ListOrdersDesc mocks base method.
func (m *MockRepository) ListOrdersDesc(ctx context.Context, count int) ([]*types.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrdersDesc", ctx, count)
	ret0, _ := ret[0].([]*types.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrdersDesc indicates an expected call of ListOrdersDesc.
func (mr *MockRepositoryMockRecorder) ListOrdersDesc(ctx, count any) *MockRepositoryListOrdersDescCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrdersDesc", reflect.TypeOf((*MockRepository)(nil).ListOrdersDesc), ctx, count)
	return &MockRepositoryListOrdersDescCall{Call: call}
}

// MockRepositoryListOrdersDescCall wrap *gomock.Call
type MockRepositoryListOrdersDescCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRepositoryListOrdersDescCall) Return(arg0 []*types.Order, arg1 error) *MockRepositoryListOrdersDescCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRepositoryListOrdersDescCall) Do(f func(context.Context, int) ([]*types.Order, error)) *MockRepositoryListOrdersDescCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRepositoryListOrdersDescCall) DoAndReturn(f func(context.Context, int) ([]*types.Order, error)) *MockRepositoryListOrdersDescCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StoreOrder mocks base method.
func (m *MockRepository) StoreOrder(ctx context.Context, order *types.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreOrder", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreOrder indicates an expected call of StoreOrder.
func (mr *MockRepositoryMockRecorder) StoreOrder(ctx, order any) *MockRepositoryStoreOrderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreOrder", reflect.TypeOf((*MockRepository)(nil).StoreOrder), ctx, order)
	return &MockRepositoryStoreOrderCall{Call: call}
}

// MockRepositoryStoreOrderCall wrap *gomock.Call
type MockRepositoryStoreOrderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRepositoryStoreOrderCall) Return(arg0 error) *MockRepositoryStoreOrderCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRepositoryStoreOrderCall) Do(f func(context.Context, *types.Order) error) *MockRepositoryStoreOrderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRepositoryStoreOrderCall) DoAndReturn(f func(context.Context, *types.Order) error) *MockRepositoryStoreOrderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
