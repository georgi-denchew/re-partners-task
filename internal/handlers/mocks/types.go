// Code generated by MockGen. DO NOT EDIT.
// Source: repartnerstask.com/m/internal/handlers (interfaces: Application)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/types.go -typed -package mocks . Application
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	types "repartnerstask.com/m/internal/domain/types"
)

// MockApplication is a mock of Application interface.
type MockApplication struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationMockRecorder
	isgomock struct{}
}

// MockApplicationMockRecorder is the mock recorder for MockApplication.
type MockApplicationMockRecorder struct {
	mock *MockApplication
}

// NewMockApplication creates a new mock instance.
func NewMockApplication(ctrl *gomock.Controller) *MockApplication {
	mock := &MockApplication{ctrl: ctrl}
	mock.recorder = &MockApplicationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplication) EXPECT() *MockApplicationMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method.
func (m *MockApplication) CreateOrder(ctx context.Context, orderItemsCount int) (map[int]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", ctx, orderItemsCount)
	ret0, _ := ret[0].(map[int]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockApplicationMockRecorder) CreateOrder(ctx, orderItemsCount any) *MockApplicationCreateOrderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockApplication)(nil).CreateOrder), ctx, orderItemsCount)
	return &MockApplicationCreateOrderCall{Call: call}
}

// MockApplicationCreateOrderCall wrap *gomock.Call
type MockApplicationCreateOrderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationCreateOrderCall) Return(packsSizeCount map[int]int, err error) *MockApplicationCreateOrderCall {
	c.Call = c.Call.Return(packsSizeCount, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationCreateOrderCall) Do(f func(context.Context, int) (map[int]int, error)) *MockApplicationCreateOrderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationCreateOrderCall) DoAndReturn(f func(context.Context, int) (map[int]int, error)) *MockApplicationCreateOrderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetOrders mocks base method.
func (m *MockApplication) GetOrders(ctx context.Context, ordersCount int) ([]*types.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrders", ctx, ordersCount)
	ret0, _ := ret[0].([]*types.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrders indicates an expected call of GetOrders.
func (mr *MockApplicationMockRecorder) GetOrders(ctx, ordersCount any) *MockApplicationGetOrdersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrders", reflect.TypeOf((*MockApplication)(nil).GetOrders), ctx, ordersCount)
	return &MockApplicationGetOrdersCall{Call: call}
}

// MockApplicationGetOrdersCall wrap *gomock.Call
type MockApplicationGetOrdersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationGetOrdersCall) Return(arg0 []*types.Order, arg1 error) *MockApplicationGetOrdersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationGetOrdersCall) Do(f func(context.Context, int) ([]*types.Order, error)) *MockApplicationGetOrdersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationGetOrdersCall) DoAndReturn(f func(context.Context, int) ([]*types.Order, error)) *MockApplicationGetOrdersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReplacePacks mocks base method.
func (m *MockApplication) ReplacePacks(packs []int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReplacePacks", packs)
}

// ReplacePacks indicates an expected call of ReplacePacks.
func (mr *MockApplicationMockRecorder) ReplacePacks(packs any) *MockApplicationReplacePacksCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplacePacks", reflect.TypeOf((*MockApplication)(nil).ReplacePacks), packs)
	return &MockApplicationReplacePacksCall{Call: call}
}

// MockApplicationReplacePacksCall wrap *gomock.Call
type MockApplicationReplacePacksCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationReplacePacksCall) Return() *MockApplicationReplacePacksCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationReplacePacksCall) Do(f func([]int)) *MockApplicationReplacePacksCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationReplacePacksCall) DoAndReturn(f func([]int)) *MockApplicationReplacePacksCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
